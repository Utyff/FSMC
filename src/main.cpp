/*
******************************************************************************
File:     main.cpp
Info:     Generated by Atollic TrueSTUDIO(R) 7.0.1   2017-01-03

The MIT License (MIT)
Copyright (c) 2009-2016 Atollic AB

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
******************************************************************************
*/

/* Includes */
#include "stm32f4xx_conf.h"
#include "stm32f4xx.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_tim.h"

/* Private macro */
/* Private variables */
/* Private function prototypes */
/* Private functions */

/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
//void init();

int main(void)
{
  int i = 0;

  /**
  *  IMPORTANT NOTE!
  *  The symbol VECT_TAB_SRAM needs to be defined when building the project
  *  if code has been located to RAM and interrupts are used. 
  *  Otherwise the interrupt table located in flash will be used.
  *  See also the <system_*.c> file and how the SystemInit() function updates 
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

//  init();

  /* Infinite loop */
  while (1)
  {
	i++;
  }
}
/*
void init() {
	//------------------Инициализация TIM6------------------
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6,ENABLE);
	//По умолчанию частота шины 24 МГц при использовании кварца 8 МГц
	TIM6->PSC = 24000 - 1; //Настройка делителя на 1000 "тиков" в секунду
	TIM6->ARR = 600; //Отработка прерывания раз в секунду
	TIM6->DIER |= TIM_DIER_UIE; //Разрешения прерывание от таймера
	TIM6->CR1 |= TIM_CR1_CEN; //Запуск таймера
	NVIC_EnableIRQ(TIM6_DAC_IRQn); //Разрешение TIM6_DAC_IRQn прерывания
	//------------------------------------------------------/

	//------------------Инициализация TIM7------------------
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7,ENABLE);
	//По умолчанию частота шины 24 МГц при использовании кварца 8 МГц
	TIM7->PSC = 24000 - 1; //Настройка делителя на 1000 "тиков" в секунду
	TIM7->ARR = 500; //Отработка прерывания раз в секунду
	TIM7->DIER |= TIM_DIER_UIE; //Разрешения прерывание от таймера
	TIM7->CR1 |= TIM_CR1_CEN; //Запуск таймера
	NVIC_EnableIRQ(TIM7_IRQn); //Разрешение TIM6_DAC_IRQn прерывания
	//------------------------------------------------------

	//------------------Инициализация портов светодиодов------------------
	GPIO_InitTypeDef GPIO_InitStructure; //Структура содержащая настройки порта
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE); //Включаем тактирование порта D
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13; //Выбираем нужные выводы | GPIO_Pin_14| GPIO_Pin_15
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; //Включаем режим выхода
	GPIO_Init(GPIOD, &GPIO_InitStructure); //вызов функции инициализации
	//--------------------------------------------------------------------
}

int GreenStat=0; //Переменная-счетчик
// Обработчик прерывания TIM6_DAC
void TIM6_DAC_IRQHandler(void)
{
  TIM6->SR &= ~TIM_SR_UIF; //Сбрасываем флаг прерывания
  if( GreenStat )
       GPIO_SetBits(GPIOD, GPIO_Pin_12);
  else
       GPIO_ResetBits(GPIOD, GPIO_Pin_12);
  GreenStat = !GreenStat;
}

int OraStat = 1;
// Обработчик прерывания TIM7
void TIM7_IRQHandler(void)
{
  TIM7->SR &= ~TIM_SR_UIF; //Сбрасываем флаг прерывания
  if( OraStat )
       GPIO_SetBits(GPIOD, GPIO_Pin_13);
  else
       GPIO_ResetBits(GPIOD, GPIO_Pin_13);
  OraStat = !OraStat;
}
//*/

